using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace IPCLogger.StackInfo
{
    // ReSharper disable PossibleNullReferenceException
    unsafe class Program
    {
        private const int FUNC_STACK_SHIFT = 64 + sizeof(int);

        static MethodVarsInfo DoX(int memAnchor = int.MaxValue)
        {
            MethodVarsInfo result = new MethodVarsInfo();

            int memAnchorAddr = (int)&memAnchor;
            void* stackPtr = (void*)(memAnchorAddr + FUNC_STACK_SHIFT);

            AssemblyDefinition asm = AssemblyDefinition.ReadAssembly("IPCLogger.StackInfo.exe");
            asm.MainModule.ReadSymbols();
            MethodBase mBase = new StackFrame(1).GetMethod();
            MethodDefinition method = asm.MainModule.Types.
                First(t => t.FullName.Equals(mBase.DeclaringType.FullName)).
                Methods.First(m => m.Name == mBase.Name);

            bool hasReturn = method.ReturnType.Name != "Void";
            if (hasReturn)
            {
                MethodVar.Skip(ref stackPtr, method.ReturnType);
            }

            VariableDefinition[] mVars = method.Body.Variables.Reverse().Skip(hasReturn ? 1 : 0).ToArray();
            result.MethodVars = new List<MethodVar>(mVars.Length);
            foreach (VariableDefinition var in mVars)
            {
                MethodVar mv = MethodVar.ReadFromStack(var.Name, ref stackPtr, var.VariableType);
                result.MethodVars.Insert(0, mv);
            }

            ParameterDefinition[] mParams = method.Parameters.Reverse().ToArray();
            result.MethodParams = new List<MethodVar>(mParams.Length);
            foreach (ParameterDefinition param in mParams)
            {
                MethodVar mv = MethodVar.ReadFromStack(param.Name, ref stackPtr, param.ParameterType);
                result.MethodParams.Insert(0, mv);
            }

            return result;
        }

        private static void DoY(long pMsg, long i, long p, long msg, long x, long i1, long i2, long l, long l1, long l2, long l3, long l4, long l5, long l6, long l7, long l8)
        {
            int iMemMark1 = 0x20;
            int iMemMark2 = 0x21;
            int iMemMark3 = 0x22;
            DoX();
//            return 9;
        }

        static void Main(string[] args)
        {
            DoY(1, 2, 3, 4, 5, 6, 7, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L);
        }
    }
    // ReSharper restore PossibleNullReferenceException
}
