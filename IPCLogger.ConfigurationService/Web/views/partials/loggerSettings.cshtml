@using IPCLogger.ConfigurationService.Entities.Models;
@using IPCLogger.ConfigurationService.CoreServices;
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<DeclaredLoggerModel>

<link href="../../css/views/loggerSettings.css" rel="stylesheet">

<div id="logger-settings">

    <input type="hidden" id="application-id" value="@ViewBag.applicationId" />
    <input type="hidden" id="logger-id" value="@ViewBag.loggerId" />
    <input type="hidden" id="is-new" value="@ViewBag.isNew" />
    <input type="hidden" id="is-embedded" value="@ViewBag.isEmbedded" />
    <input type="hidden" id="hide-headers" value="@ViewBag.hideHeaders" />

    <div class="card bg-light">

        <div class="card-container">

            @if (!ViewBag.hideHeaders)
            {
                <div class="card-header">Common settings</div>
            }

            <div class="card-body">
                @foreach (PropertyModel model in Model.CommonProperties)
                {
                    <div class="mt-2">
                        <div class="group-param-info">
                            <label>
                                @(ControlsService.GetPropertyDisplayName(Model.TypeName, model))
                                @if (model.IsRequired)
                                {
                                    <a style="color: red; font-weight: bold"> * </a>
                                }
                            </label>
                            @{
                                string description = ControlsService.GetPropertyDescription(Model.TypeName, model);
                                if (!string.IsNullOrEmpty(description))
                                {
                                    <img class="icon-info" data-toggle="tooltip" data-html="true" title="@description"
                                         src="assets/icon-info-16.png" />
                                }
                            }
                        </div>
                        @Html.Raw(ControlsService.ControlByPropertyModel(Model.TypeName, model))
                        <div class="invalid-feedback"></div>
                    </div>
                }
            </div>

            @if (Model.HasProperties)
            {
                if (!ViewBag.hideHeaders)
                {
                    <div class="card-header">@ViewBag.typeName settings</div>
                }

                <div class="card-body">

                    @foreach (PropertyModel model in Model.Properties)
                    {
                        <div class="mt-2">
                            <div class="group-param-info">
                                <label>
                                    @(ControlsService.GetPropertyDisplayName(Model.TypeName, model))
                                    @if (model.IsRequired)
                                    {
                                        <a style="color: red; font-weight: bold"> * </a>
                                    }
                                </label>
                                @{
                                    string description = ControlsService.GetPropertyDescription(Model.TypeName, model);
                                    if (!string.IsNullOrEmpty(description))
                                    {
                                        <img class="icon-info" data-toggle="tooltip" data-html="true" title="@description"
                                             src="assets/icon-info-16.png" />
                                    }
                                }
                            </div>
                            @Html.Raw(ControlsService.ControlByPropertyModel(Model.TypeName, model))
                            <div class="invalid-feedback"></div>
                        </div>
                    }
                </div>
            }

        </div>

    </div>

    <div class="div-save-cancel">
        <button id="btn-save" class="btn btn-sm btn-save">Save</button>
        @if (ViewBag.isEmbedded)
        {
            <button id="btn-cancel" class="btn btn-sm btn-secondary">Reset</button>
        }
        else
        {
            <div class="btn-group">
                <button id="btn-cancel" class="btn btn-sm btn-secondary">Cancel</button>
                <button class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown"></button>
                <div class="dropdown-menu dropdown-menu-right">
                    <a id="btn-reset" class="dropdown-item" style="cursor: pointer">Reset changes</a>
                </div>
            </div>
        }
    </div>

</div>

<script src="../../js/views/loggerSettings.js" type="text/javascript"></script>
<script src="../../js/controllers/loggerSettingsController.js" type="text/javascript"></script>
<script src="../../js/controllers/applicationsController.js" type="text/javascript"></script>
<script src="../../js/controllers/popupController.js" type="text/javascript"></script>